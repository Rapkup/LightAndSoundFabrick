// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SemataryFabrick.Infrastructure.Implementations.Contexts;

#nullable disable

namespace SemataryFabrick.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_type", new[] { "rent", "individual" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "payment_status", new[] { "unpaid", "payment_confirmation", "paid" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "product_state", new[] { "available", "in_repair", "out_of_stock" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_type", new[] { "guest", "individual_customer", "legal_customer", "director", "order_manager", "worker", "tech_order_lead" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "work_task_state", new[] { "in_progress", "completed", "assigned", "not_assigned" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderCrewWorker", b =>
                {
                    b.Property<Guid>("OrderCrewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderCrewsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("OrderCrewWorker");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.CartModels.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.CartModels.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Items.ItemInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("EndRentDate")
                        .HasColumnType("date");

                    b.Property<string>("EventAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("IndividualCustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderManagerId")
                        .HasColumnType("uuid");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentState")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartRentDate")
                        .HasColumnType("date");

                    b.Property<Guid>("TechOrderLeadId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IndividualCustomerId");

                    b.HasIndex("OrderManagerId");

                    b.HasIndex("TechOrderLeadId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderCrew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderBaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TechLeadId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("OrderBaseId");

                    b.HasIndex("TechLeadId");

                    b.ToTable("OrderCrews");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderBaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderBaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.WorkTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkTaskState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.WorkTaskAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderCrewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderCrewId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("WorkTaskAssignments");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.Director", b =>
                {
                    b.HasBaseType("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.IndividualCustomer", b =>
                {
                    b.HasBaseType("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser");

                    b.Property<string>("PassportIdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.LegalCustomer", b =>
                {
                    b.HasBaseType("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GovernmentCode")
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxIdNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isGovernment")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.OrderManager", b =>
                {
                    b.HasBaseType("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.TechOrderLead", b =>
                {
                    b.HasBaseType("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.Worker", b =>
                {
                    b.HasBaseType("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("OrderCrewWorker", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderCrew", null)
                        .WithMany()
                        .HasForeignKey("OrderCrewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.CartModels.Cart", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.CartModels.CartItem", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.CartModels.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.Items.Item", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Items.Item", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.Discount", "Discount")
                        .WithMany("Items")
                        .HasForeignKey("DiscountId");

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.Items.ItemInventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.SubCategory", "SubCategory")
                        .WithMany("Items")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Inventory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderBase", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.LegalCustomer", "Customer")
                        .WithMany("OrderBases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.IndividualCustomer", null)
                        .WithMany("OrderBases")
                        .HasForeignKey("IndividualCustomerId");

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.OrderManager", "OrderManager")
                        .WithMany("OrderBases")
                        .HasForeignKey("OrderManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.TechOrderLead", "TechOrderLead")
                        .WithMany("OrderBases")
                        .HasForeignKey("TechOrderLeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderManager");

                    b.Navigation("TechOrderLead");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderCrew", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderBase", "OrderBase")
                        .WithMany("OrderCrews")
                        .HasForeignKey("OrderBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.UserModels.TechOrderLead", "TechOrderLead")
                        .WithMany("OrderCrews")
                        .HasForeignKey("TechLeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderBase");

                    b.Navigation("TechOrderLead");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderItem", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderBase", "OrderBase")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.Items.Item", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderBase");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.SubCategory", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.ProductCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.WorkTaskAssignment", b =>
                {
                    b.HasOne("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderCrew", "OrderCrew")
                        .WithMany("WorkTaskAssignments")
                        .HasForeignKey("OrderCrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SemataryFabrick.Domain.Entities.Models.WorkTask", "WorkTask")
                        .WithMany("WorkTaskAssignments")
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderCrew");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.CartModels.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Discount", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Items.Item", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.Items.ItemInventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderBase", b =>
                {
                    b.Navigation("OrderCrews");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.OrderModels.OrderCrew", b =>
                {
                    b.Navigation("WorkTaskAssignments");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.ProductCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.SubCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.WorkTask", b =>
                {
                    b.Navigation("WorkTaskAssignments");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.IndividualCustomer", b =>
                {
                    b.Navigation("OrderBases");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.LegalCustomer", b =>
                {
                    b.Navigation("OrderBases");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.OrderManager", b =>
                {
                    b.Navigation("OrderBases");
                });

            modelBuilder.Entity("SemataryFabrick.Domain.Entities.Models.UserModels.TechOrderLead", b =>
                {
                    b.Navigation("OrderBases");

                    b.Navigation("OrderCrews");
                });
#pragma warning restore 612, 618
        }
    }
}
